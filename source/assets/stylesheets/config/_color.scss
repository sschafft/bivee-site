// =============================================================================
//  Global color styles
// -> base colors are set here on global elements, but modules apply their own
// -> refer to colors ONLY via the $theme maps
// =============================================================================

@import 'libs';

// Base Palette
// -----------------------------------------------------------------------------
// -> PRIVATE, do not use outside this settings file
//    unless you have a really ironclad reason

// neutrals
$white: #fff;
$blue-kuri: #9698b1;
$blackberry: #263750;

// highlights
// -> 4 flavors of Bivee. Hat tip to Christie.
$highlights: (
  'blueberry': #11a9be,
  'raspberry': #ef4759,
  'orange': #eabf32,
  'kiwi': #9bc73f
);

// getter function for highlight colors
// -> PRIVATE
@function highlight($name) {
  @return map-get($highlights, $name);
}

// Themes
// -----------------------------------------------------------------------------

$themes: (
  'default': (
    'text': (
      'primary': $blackberry,
      'secondary': shade($blue-kuri, 10),
      'tertiary': tint($blue-kuri, 10)
    ),
    'bg': $white,
    'well': tint($blue-kuri, 92),
    'shadow': tint($blue-kuri, 40),
    'border': tint($blue-kuri, 60),
    'highlight': highlight('raspberry'),
    'accent': highlight('blueberry')
  ),
  'dark': (
    'text': (
      'primary': $white,
      'secondary': tint($blackberry, 70),
      'tertiary': tint($blackberry, 45)
    ),
    'bg': $blackberry,
    'well': darken($blackberry, 7),
    'shadow': shade($blackberry, 50),
    'border': darken($blackberry, 15),
    'highlight': highlight('raspberry'),
    'accent': highlight('blueberry')
  ),
  'midtone': (
    'text': (
      'primary': $white,
      'secondary': shade($blackberry, 10),
      'tertiary': shade($blue-kuri, 40)
    ),
    'bg': $blue-kuri,
    'well': darken($blue-kuri, 5),
    'shadow': shade($blue-kuri, 30),
    'border': darken($blue-kuri, 10),
    'highlight': #ffc60c,
    'accent': $blackberry
  )
);

// getter function to access color map values
// -> PARAMS
//    - STRING/LIST $colors: the name(s) of the color roles, e.g. 'highlight'
//    - STRING $name (optional): the name of the theme, e.g. 'default', 'dark'
//    - NUMBER $grade (optional): 'grade' (as in 'gradation') the color to be darker or lighter
//      -> pass in a negative number to darken the color
//      -> pass in a positive number to lighten the color
// -> PUBLIC
// -> USAGE:
//    - color: color('text' 'primary');
//    - color: color('highlight' 'primary', 'reverse');
@function color($colors, $name: 'default', $grade: 0, $opacity: 1) {
  // first extract the 'theme' nested map
  $theme: map-get($themes, $name);

  // now get the nested map for the first color value
  $color: map-get($theme, nth($colors, 1));

  // if there's more than one color string in the $colors list, dig deeper
  @if length($colors) > 1 {
    @for $i from 2 through length($colors) {
      // keep updating $color with the next nested map until we've reached the end of the list
      $color: map-get($color, nth($colors, $i));
    }
  }

  // lighten or darken the color
  @if ($grade < 0) {
    $color: shade($color, abs($grade));
  } @elseif ($grade > 0) {
    $color: tint($color, abs($grade));
  }

  @if ($opacity < 1) {
    $color: rgba($color, $opacity);
  }

  @return $color;
}

// set print color overrides
@mixin print-colors {
  @media print {
    // sass-lint:disable no-important
    background: transparent !important;
    border-color: $gray !important;
    color: $black !important;
  }
}

// add '!important' to the end of a property
@function _important($prop, $add: false) {
  @if $add == true {
    @return append($prop, unquote(' !important'));
  } @else {
    @return $prop;
  }
}

// print out the color styles (and state, if needed) for a given attribute
// -> uses same arguments as color mixin below
// -> PRIVATE
@mixin _color-props(
  $color,
  $prop: color,
  $theme: 'default',
  $grade: 0,
  $opacity: 1,
  $hover: false,
  $active: false,
  $focus: false,
  $important: false
) {

  // default values for states
  $hover-default: 10;
  $active-default: -10;
  $focus-default: 10;


  // set color for default theme
  #{$prop}: _important(color($color, $theme, $grade, $opacity), $important);

  // hover/active/focus states
  @if $hover != false {
    &:hover {
      $percentage: if(type-of($hover) == 'number', $hover, $hover-default);
      #{$prop}: _important(color($color, $theme, $percentage + $grade, $opacity), $important);
    }
  }

  @if $active != false {
    &:active {
      $percentage: if(type-of($active) == 'number', $active, $active-default);
      #{$prop}: _important(color($color, $theme, $percentage + $grade, $opacity), $important);
    }
  }

  @if $focus != false {
    &:focus {
      $percentage: if(type-of($focus) == 'number', $focus, $focus-default);
      #{$prop}: _important(color($color, $theme, $percentage + $grade, $opacity), $important);
    }
  }
}

// add colors for each theme
// -> PUBLIC
// -> PARAMS:
//    - STRING/LIST $color: the name of the color you want to use, e.g. 'highlight'
//    - STRING $prop (optional): the property this will apply to, e.g. 'background-color'
//    - STRING $grade (optional): 'grade' the color darker or lighter (as in 'gradation').
//      -> pass in a negative number to darken the color
//      -> pass in a positive number to lighten the color
//    - BOOLEAN/NUMBER $hover, $active, $focus (optional): include state?
//      -> pass in 'true' for each to pick up the default hover, active, and focus colors
//      -> pass in a number to change the color gradation (e.g. $hover: 12 will lighten
//         hover state color by 12%; $hover: -15, however, will darken it.)
//    - BOOLEAN $important (optional): add the '!important' prop?
// -> USAGE:
//      @include color(text primary, background-color, true, false, 12, true);
@mixin color(
  $color,
  $prop: color,
  $grade: 0,
  $opacity: 1,
  $hover: false,
  $active: false,
  $focus: false,
  $important: false
) {
  @include _color-props($color, $prop, 'default', $grade, $opacity, $hover, $active, $focus, $important);

  // set the color of this element to match the theme of this context
  @each $theme, $colors in $themes {
    // set color to theme of either this element or its parent
    &.c-theme-#{$theme},
    .c-theme-#{$theme} & {
      @include _color-props($color, $prop, $theme, $grade, $opacity, $hover, $active, $focus, $important);
    }
  }
}

// shortcut decorators for the above, using specific attributes
@mixin color-background($color, $arguments...) {
  @include color($color, 'background-color', $arguments...);
}

@mixin color-border($color, $arguments...) {
  @include color($color, 'border-color', $arguments...);
}

// Theme Globals
// -----------------------------------------------------------------------------
// -> set up helper classes and base colors

@mixin theme($theme) {
  background-color: color('bg', $theme);
  border-color: color('border', $theme);
  color: color('text' 'primary', $theme);

  // highlight color when you select something
  ::selection {
    background: color('highlight', $theme);
    color: color('bg', $theme);
    text-shadow: none;
  }
}
